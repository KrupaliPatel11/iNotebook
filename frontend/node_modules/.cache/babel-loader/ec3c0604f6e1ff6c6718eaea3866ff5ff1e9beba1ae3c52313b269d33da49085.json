{"ast":null,"code":"var _jsxFileName = \"/Users/ztlab131/Krupali/Practice/MERN/inotebook/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./notesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Add Note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/user/addnotes`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': \"application/json\",\n        \"Authorization\": localStorage\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    setNotes(notes.concat(json));\n  };\n\n  // Get All Note\n  const getNotes = async () => {\n    const response = await fetch(`${host}/user/allnotes`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': \"application/json\",\n        \"Authorization\": localStorage\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json.notes);\n  };\n\n  // Edit Note\n  const editNote = async (id, title, description, tag) => {\n    // Api call\n    const response = await fetch(`${host}/user/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': \"application/json\",\n        \"Authorization\": localStorage\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    setNotes(json);\n    let newNotes = await JSON.parse(JSON.stringify(notes));\n    // Logic for delete note\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n\n  // Delete Note\n  const deleteNote = async id => {\n    // Api call\n    const response = await fetch(`${host}/user/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': \"application/json\",\n        \"Authorization\": localStorage\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      editNote,\n      deleteNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","addNote","title","description","tag","response","fetch","method","headers","localStorage","body","JSON","stringify","json","concat","getNotes","console","log","editNote","id","newNotes","parse","index","length","element","_id","deleteNote","filter","note","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ztlab131/Krupali/Practice/MERN/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport NoteContext from \"./notesContext\";\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\"\n    const notesInitial = []\n    const [notes, setNotes] = useState(notesInitial)\n\n\n    // Add Note\n    const addNote = async (title, description, tag) => {\n        const response = await fetch(`${host}/user/addnotes`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': \"application/json\",\n                \"Authorization\": localStorage\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const json = await response.json();\n        setNotes(notes.concat(json))\n    }\n\n    // Get All Note\n    const getNotes = async () => {\n        const response = await fetch(`${host}/user/allnotes`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': \"application/json\",\n                \"Authorization\": localStorage\n            },\n        });\n        const json = await response.json()\n        console.log(json);\n        setNotes(json.notes);\n    }\n\n    // Edit Note\n    const editNote = async (id, title, description, tag) => {\n        // Api call\n        const response = await fetch(`${host}/user/updatenote/${id}`, {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': \"application/json\",\n                \"Authorization\": localStorage\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const json = response.json();\n        setNotes(json);\n        let newNotes = await JSON.parse(JSON.stringify(notes))\n        // Logic for delete note\n        for (let index = 0; index < newNotes.length; index++) {\n            const element = newNotes[index];\n            if (element._id === id) {\n                newNotes[index].title = title;\n                newNotes[index].description = description;\n                newNotes[index].tag = tag;\n                break;\n            }\n        }\n        setNotes(newNotes);\n    }\n\n    // Delete Note\n    const deleteNote = async (id) => {\n        // Api call\n        const response = await fetch(`${host}/user/deletenote/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': \"application/json\",\n                \"Authorization\": localStorage\n            },\n        });\n        const json = response.json();\n        console.log(json);\n        const newNotes = notes.filter((note) => { return note._id !== id });\n        setNotes(newNotes);\n    }\n\n    return (\n        <NoteContext.Provider value={{ notes, addNote, editNote, deleteNote, getNotes }}>\n            {props.children}\n        </NoteContext.Provider>\n    )\n}\n\n\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}